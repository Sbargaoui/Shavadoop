package master;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Vector;

/**
 * @author Benseddik Mohammed
 * @author Sami Bergaoui
 * @version 1.0.1
 * 
 */
public class ShavadoopThread extends Thread{
	String directoryPath = Constants.directory;
	String pathSlaveJar = directoryPath + Master.slaveJarName;
	String userSession = "ssh " + Master.userName;
	String namePc;
	String pathSx;
	String pathsUmx = "";
	String pathSmx;
	String mode;
	String wordToReduce;
	HashSet<String> listOfUmx;
	ArrayList<String> SlaveOutputStream;

	/**
	 * Getter of the SlaveOutputStream
	 * @return SlaveOutputStream is all the output the slave produces on the outputStream
	 */
	public ArrayList<String> getSlaveOutputStream() {
		return SlaveOutputStream;
	}

	/**
	 * First constructor of the thread for SxUMx Mode
	 * @param namePc
	 * @param Sx is the SxfileName
	 * @param mode is the mode of execution of the thread : SxUMx or UMxSMx
	 */
	public ShavadoopThread(String namePc, String SxFileName,String mode){
		this.namePc = namePc;
		SlaveOutputStream = new ArrayList<String>();
		pathSx = " " + directoryPath + SxFileName;
		this.mode = mode;
	}

	/**
	 * Second constructor of the thread for UMxSMx Mode
	 * @param namePc
	 * @param wordToReduce is the word we want to count the occurence for
	 * @param listOfUmx list of Umx files where the word appears
	 * @param pathSmx path of the Smx file where to save the shuffled Umx 
	 * @param mode
	 */
	public ShavadoopThread(String namePc, String wordToReduce, HashSet<String> listOfUmx ,
			String pathSmx,String mode){
		this.namePc = namePc;
		this.wordToReduce = wordToReduce;
		this.pathSmx = pathSmx;
		SlaveOutputStream = new ArrayList<String>();
		for(String umxs : listOfUmx)
		{
			pathsUmx += " " + directoryPath + umxs;
		}
		this.mode = mode;
		this.listOfUmx = listOfUmx;
	}

	public HashSet<String> getListOfUmx() {
		return listOfUmx;
	}

	public String getNamePc() {
		return namePc;
	}

	public String getPathsUmx() {
		return pathsUmx;
	}

	public String getPathSmx() {
		return pathSmx;
	}

	public String getWordToReduce() {
		return wordToReduce;
	}

	/**
	 * This method executes an ssh command and get the output from the outputStream of the slave
	 * @param command is the ssh command to run the slave with all the parameters
	 * @return contentFile is the final content of Umx or Smx/Rmx files we get from the
	 * output from the slave
	 */
	public String getOutputStreamThread(String command)
	{
		// Creating the ssh command
		Vector<String> commandBash = new Vector<String>();
		commandBash.add("bash");
		commandBash.add("-c");
		commandBash.add(command);

		ProcessBuilder processbuilder = new ProcessBuilder(commandBash);
		Process process = null;

		try {
			process = processbuilder.start();
		} catch (IOException e) {
			e.printStackTrace();
		}

		// Reading the outputStream from the execution of the slave
		BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));

		StringBuilder builder = new StringBuilder();
		String line = null;
		try {
			while ( (line = reader.readLine()) != null) {
				builder.append(line + "\n");
				SlaveOutputStream.add(line);
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		String contentFile = builder.toString();
		
		return contentFile;
	}

	// doc
	/**
	 * A method to build the String command for the execution of the slave
	 * depending on the mode of execution
	 * @return
	 */
	public String buildCommandForThread()
	{
		String command = "";
		if(mode.equals("SxUMx"))
		{
			command = userSession + namePc + " \"java -jar " + pathSlaveJar + " " + 
					mode +  pathSx + "\"";
		}
		if(mode.equals("UMxSMx"))
		{
			command = userSession + namePc + " \"java -jar " 
					+ pathSlaveJar + " " + mode + " " + wordToReduce + " " + pathSmx + " " +
					pathsUmx + "\"";
		}

		return command;
	}

	// The run function for the thread
	/* (non-Javadoc)
	 * @see java.lang.Thread#run()
	 */
	public void run(){
		String command = buildCommandForThread();
		String contentFile = getOutputStreamThread(command);
		System.out.println(contentFile);
	}
}
